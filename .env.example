# Discord MCP Suite Configuration Example
# Copy this file to .env and fill in your values

# ==========================================
# REQUIRED SETTINGS
# ==========================================

# Discord Bot Token (Required)
# Get this from https://discord.com/developers/applications
# Create a new application, go to Bot section, and copy the token
DISCORD_TOKEN=your_discord_bot_token_here

# ==========================================
# OPTIONAL SETTINGS
# ==========================================

# Server Configuration
PORT=8080
NODE_ENV=development

# Security - Restrict to specific servers/channels
# Comma-separated list of Discord server IDs the bot should operate on
# Leave empty to allow ALL guilds the bot has access to
# You can find guild IDs by enabling Developer Mode in Discord
# Right-click on a server and select "Copy ID"
ALLOW_GUILD_IDS=
ALLOW_CHANNEL_IDS=

# Transport Configuration
# Options: stdio (default for MCP), http (for cloud/web deployments)
# Use stdio for standard MCP clients, http for web-based integrations
TRANSPORT=http

# Feature Flags (1 = enabled, 0 = disabled)
ENABLE_USER_MANAGEMENT=0
ENABLE_VOICE_CHANNELS=0
ENABLE_DIRECT_MESSAGES=0
ENABLE_SERVER_MANAGEMENT=0
ENABLE_RBAC=0
ENABLE_CONTENT_MANAGEMENT=0

# Health Check Configuration
HEALTH_CHECK_ENABLED=1
CONFIG_ENDPOINT_ENABLED=1

# ==========================================
# CLOUD DEPLOYMENT EXAMPLES
# ==========================================

# For Docker deployment:
# docker run -e DISCORD_TOKEN=your_token -p 8080:8080 sachicali/discordmcp-suite:latest

# For Kubernetes (update k8s-deployment.yaml secret):
# kubectl create secret generic discordmcp-suite-secrets --from-literal=discord-token=your_token

# For Docker Compose:
# Copy this file to .env and run: docker-compose up -d